#!/bin/python
#
# A simple tool for cracking Jboss passwords in the format of hex(md5(user:realm:password))
#
# Author: Ralph Vickery
# Version: 0.1
# Date: 04/04/2019
#
# Author: md347
# Version: 0.2
# Date: 12/06/2024
#    Changes:
#        - Updated to Python 3
#        - Replaced unsupported md5 library with hashlib
#        - Added output file argument and method to write found password to file
#        - Added read file method with encoding
#        - Added error checking for password file processing

import os
import multiprocessing
import argparse
import hashlib
import re
from termcolor import colored



# Handle command line arguments
cliParser = argparse.ArgumentParser(description="A simple tool for performing dictionary attacks on jboss hashes")
cliParser.add_argument('-H', metavar='Jboss Property File', type=argparse.FileType('r'),
                       help='Jboss application or management propery file', required=True)
cliParser.add_argument('-P', nargs='*', help='Paths to password files', required=True)
cliParser.add_argument('-r', metavar="Jboss Realm", help='The realm', required=True)
cliParser.add_argument('-d', action='store_true', help='Print debug messages')
cliParser.add_argument('-o', required=True, help='Output file name')


args = cliParser.parse_args()

#Define Variables
passwords = []
users = []
hashes = []

# Function to read the file content with specified encoding and error handling
def read_file(file_path, encoding='utf-8'):
    with open(file_path, 'r', encoding=encoding, errors='ignore') as f:
        return f.read()

def LoadPropertyFile():
	for line in args.H:
		
		line = line.strip('\n')
		line = line.strip('\r')
		if re.search(r"^(?!#).*=[a-f0-9]{32}$",line):
			output = line.split("=")
			users.append(output[0])
			hashes.append(output[1])

	print(("%s Hashes Loaded" % len(users)))

def LoadPasswordList():
	print ("Loading passwords into memory...")
	#add blank password
	passwords.append("")

	#add users to passwords
	for user in users:
		passwords.append(user)

	#add passwords
	for file_path in args.P:
		try:
			# Read the content of the file
			print(file_path)
			password_content = read_file(file_path)
			
			for password in password_content.splitlines():
				password = password.strip('\n')
				password = password.strip('\t')
				passwords.append(password)
		except UnicodeDecodeError as e:
			print(f"Error reading file {file_path}: {e}")
		except Exception as e:
			print(f"An unexpected error occurred: {e}")

	print(("%s Passwords Loaded" % len(passwords)))

def HashPassword(user,password):
	return hashlib.md5((user+":"+args.r+":"+password).encode()).hexdigest()

def CheckForCollision(hash):
	if hash in hashes:
		return True
	else:
		return False

def CrackPasswords(user):
	for password in passwords:
		hash = HashPassword(user, password)
		collision = CheckForCollision(hash)
		# print(hash)

		if collision:
			write_passwords_to_file(args.o, user, passwords)
			print(colored("Password Found: " +user+":"+password, 'red'))
			break

def write_passwords_to_file(file_name, user, passwords):
    with open(file_name, 'w') as f:
        for password in passwords:
            f.write(f"Password Found: {user}:{password}\n")

#Create the required lists in memory.
print(colored("#########################################################", 'blue'))
LoadPropertyFile()
#LoadUserList()
LoadPasswordList()
#LoadHashList()
print(colored("#########################################################", 'blue'))
print("")
print("-----------------------------------")
print("Cracking Started")
print("-----------------------------------")

for user in users:
	print(("Cracking Passwords for user: "+user))
	CrackPasswords(user)
